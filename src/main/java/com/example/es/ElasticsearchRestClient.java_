package com.example.es;

//import com.sun.xml.internal.ws.util.StringUtils;
import org.apache.http.client.config.RequestConfig;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;

import org.apache.http.HttpHost;
import org.springframework.context.annotation.Configuration;

import java.util.Arrays;
import java.util.Objects;

@Configuration
public class ElasticsearchRestClient {
    private static final int TIME_OUT=5*60*1000;//超时5分钟
    private static final int ADDRESS_LENGTH=2;
    private static final String protocol="http";

    @Value("${elasticsearch.ip")
    String[] ipAddress;

    @Bean
    public RestClientBuilder restClientBuilder() {
        HttpHost[] hosts= Arrays.stream(ipAddress)
                .map(this::makeHttpHost)
                .filter(Objects::nonNull)
                .toArray(HttpHost[]::new);
        return RestClient.builder(hosts);
    }

    @Bean(name="heighLevelClient")
    public RestHighLevelClient highLevelClient(@Autowired RestClientBuilder restClientBuilder){
        restClientBuilder.setRequestConfigCallback(
                new RestClientBuilder.RequestConfigCallback(){
                    @Override
                    public RequestConfig.Builder customizeRequestConfig(
                            RequestConfig.Builder requestConfigBuilder){
                        return requestConfigBuilder.setSocketTimeout(TIME_OUT);
                    }
                });

        return new RestHighLevelClient(restClientBuilder);
    }

    private HttpHost makeHttpHost(String s){
        //assert StringUtils.isNotEmpty(s);
        String[] address=s.split(":");
        if(address.length==ADDRESS_LENGTH){
            String ip=address[0];
            int port=Integer.parseInt(address[1]);
            System.err.println(ip+"+"+port);
            return new HttpHost(ip,port,protocol);
        }else {
            return null;
        }
    }

}
